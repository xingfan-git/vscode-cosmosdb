/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { IActionContext } from "@microsoft/vscode-azext-utils";
import * as vscode from 'vscode';
import { ext } from '../../extensionVariables';
import { MongoCommand } from '../MongoCommand';
import { findCommandAtPosition, getAllCommandsFromText } from '../MongoScrapbook';
import { loadPersistedMongoDB } from "./connectMongoDatabase";

export async function generateVCoreQuery(_context: IActionContext, range?: vscode.Range): Promise<void> {
    await loadPersistedMongoDB();
    const editor = vscode.window.activeTextEditor;
    const document = editor?.document;
    if (document) {
        const userQuery = document.getText(range);
        const text = `db.runCommand({copilot: "collectionName", commandType: 1, query: "${userQuery}"})`;
        const commands: MongoCommand[] = getAllCommandsFromText(text);
        const command: MongoCommand = findCommandAtPosition(commands, new vscode.Position(0, 0));
        const result = await executeCopilotCommand(_context, command);
        const regex = /generatedQuery: '([^']+)'[\s\S]*?explanation[\s\S]*?"([^"]+)\\"/;
        const match = result.match(regex);
        if (match) {
            const generateResult = `\n\n// The following code was generated by MongoDB vCore Copilot.
// It may contain errors and should be reviewed before use.
// Explainaion: ${match[2]}
    ${match[1]}\n`;

            await editor.edit(editBuilder => {
                const position = new vscode.Position(document.lineCount, 0);
                editBuilder.insert(position, generateResult);
            });
        }
        else {
            await editor.edit(editBuilder => {
                const position = new vscode.Position(document.lineCount, 0);
                editBuilder.insert(position, `\n\n${result}\n`);
            });
        }
    } else {
        throw new Error('No active document found.');
    }
}


async function executeCopilotCommand(context: IActionContext, command: MongoCommand): Promise<string> {
    if (command) {
        const database = ext.connectedMongoDB;
        if (!database) {
            throw new Error('Please select a vCore database to run against by selecting it in the explorer and selecting the "Connect" context menu item');
        }
        const result = await database.executeCommand(command, context);
        return JSON.stringify(result);
    } else {
        throw new Error('No MongoDB command found at the current cursor location.');
    }
}
